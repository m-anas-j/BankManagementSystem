//account table

CREATE TABLE ACCOUNT(
NAME VARCHAR2(50),
DATE_OF_ACCOUNT_CREATION DATE,
ACCOUNT_TYPE VARCHAR2(50),
ACCOUNT_NUMBER NUMBER(14,0) PRIMARY KEY,
MOBILE_NUMBER NUMBER,
SECURITY_QUESTION VARCHAR2(50),
CUSTOMER_ID NUMBER,
FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
);
insert into customer values ('anas',sysdate,to_date('12/5/2018','dd/mm/yyyy'),'bangity','male','ctg','Current Account','muslim','',2,'nein');

//generate account id function
CREATE OR REPLACE FUNCTION GEN_ID(currentdate in date, ACCOUNT_TYPE IN VARCHAR2)
RETURN NUMBER
IS
acc_num ACCOUNT.ACCOUNT_NUMBER%TYPE:=0;
acc_type ACCOUNT.ACCOUNT_NUMBER%TYPE:=0;
currentcustomercount NUMBER:=0;
BEGIN
select count(*) into currentcustomercount from ACCOUNT where to_char(date_of_account_creation) in to_char(sysdate);
IF currentcustomercount IS NULL THEN  ---FOR THE FIRST TIME
	currentcustomercount:=1;
ELSE 
currentcustomercount:=currentcustomercount + 1;	---NOT THE FIRST TIME
END IF;
IF ACCOUNT_TYPE LIKE 'Savings Account' THEN  ---FOR THE FIRST TIME
	acc_type:=11;
ELSIF ACCOUNT_TYPE LIKE 'Current Account' THEN
	acc_type:=12;
ELSIF ACCOUNT_TYPE LIKE 'Student Account' THEN
	acc_type:=13;
END IF;
acc_num := TO_NUMBER(SUBSTR(TO_CHAR(currentdate, 'YYYYMMDD'),3,6) || TO_CHAR(acc_type) || TO_CHAR(currentcustomercount));

RETURN NVL(acc_num,-1);
END;
/

//trigger for implicitly creating and adding account number
CREATE OR REPLACE TRIGGER TRIGGER_GEN_ID
BEFORE INSERT ON ACCOUNT
FOR EACH ROW
BEGIN
:NEW.ACCOUNT_NUMBER:=GEN_ID(SYSDATE,:NEW.ACCOUNT_TYPE);
END;
/

---CUSTOMER TABLE
CREATE TABLE CUSTOMER(
CUSTOMER_ID NUMBER PRIMARY KEY,
NAME VARCHAR2(50),
DATE_OF_SIGN_UP DATE,
DATE_OF_BIRTH DATE,
NATIONALITY VARCHAR2(20),
GENDER VARCHAR2(10),
ADDRESS VARCHAR2(50),
RELIGION VARCHAR2(10),
MOBILE_NUMBER NUMBER
PASSWORD VARCHAR2(100),
PIN NUMBER(4,0)
);
insert into customer values(null,'anas',SYSDATE,to_date('12/5/2018','dd/mm/yyyy'),'nation','gender','address','religion',123);
//generate customer id function
CREATE OR REPLACE FUNCTION GEN_CUSTOMER_ID(currentdate in date)
RETURN NUMBER
IS
acc_num ACCOUNT.ACCOUNT_NUMBER%TYPE:=0;
currentcustomercount NUMBER:=0;
BEGIN
select count(*) into currentcustomercount from CUSTOMER where to_char(DATE_OF_SIGN_UP) in to_char(sysdate);
IF currentcustomercount IS NULL THEN  ---FOR THE FIRST TIME
	currentcustomercount:=1;
ELSE 
currentcustomercount:=currentcustomercount + 1;	---NOT THE FIRST TIME
END IF;
acc_num := TO_NUMBER(TO_CHAR(currentdate, 'YYYYMMDD') || TO_CHAR(currentcustomercount));

RETURN NVL(acc_num,-1);
END;
/

//trigger for implicitly creating and adding customer id
CREATE OR REPLACE TRIGGER TRIGGER_GEN_CUSTOMER_ID
BEFORE INSERT ON CUSTOMER
FOR EACH ROW
BEGIN
:NEW.CUSTOMER_ID:=GEN_CUSTOMER_ID(SYSDATE);
END;
/

---LOGIN PROCEDURE
CREATE OR REPLACE PROCEDURE LOGIN_PROCEDURE(ENTERED_CUSTOMER_ID IN NUMBER,ENTERED_PASSWORD IN VARCHAR2,RESULT OUT NUMBER)
 AS
 ACTUAL_PASSWORD VARCHAR2(100);
 BEGIN
 SELECT PASSWORD INTO ACTUAL_PASSWORD FROM CUSTOMER WHERE CUSTOMER_ID = ENTERED_CUSTOMER_ID;
 IF ENTERED_PASSWORD = ACTUAL_PASSWORD THEN
 RESULT := 1;
 ELSE RESULT := 0;
 END IF;
 COMMIT;
 END;
 /

---PIN VERIFICATION PROCESS
CREATE OR REPLACE PROCEDURE VERIFY_PIN(ENTERED_CUSTOMER_ID IN NUMBER,ENTERED_PIN IN NUMBER,RESULT OUT NUMBER)
 AS
 ACTUAL_PIN NUMBER;
 BEGIN
 SELECT PIN INTO ACTUAL_PIN FROM CUSTOMER WHERE CUSTOMER_ID = ENTERED_CUSTOMER_ID;
 IF ENTERED_PIN = ACTUAL_PIN THEN
 RESULT := 1;
 ELSE RESULT := 0;
 END IF;
 COMMIT;
 END;
 /

---DEPOSIT PROCEDURE
CREATE OR REPLACE PROCEDURE DEPOSIT(ACCOUNT IN NUMBER,AMOUNT IN NUMBER,TOTAL OUT NUMBER)
 AS
 CURRENT_BALANCE NUMBER;
 BEGIN
 SELECT FUNDS INTO CURRENT_BALANCE FROM ACCOUNT WHERE ACCOUNT_NUMBER = ACCOUNT;
 CURRENT_BALANCE:=CURRENT_BALANCE+AMOUNT;
 TOTAL:=CURRENT_BALANCE;
 UPDATE ACCOUNT SET FUNDS = CURRENT_BALANCE WHERE ACCOUNT_NUMBER = ACCOUNT;
 NEW_DEPOSIT_TRANSACTION_ENTRY(ACCOUNT,AMOUNT);
 COMMIT;
 END;
 /

---PROCEDURE for new DEPOSIT entry in the transactions database
CREATE OR REPLACE PROCEDURE NEW_DEPOSIT_TRANSACTION_ENTRY(DEPOSIT_ACCOUNT IN NUMBER,AMOUNT IN NUMBER)
AS
BEGIN
INSERT INTO TRANSACTION (TRANSACTION_TYPE, TRANSACTION_DATE, TRANSACTION_AMOUNT, ACCOUNT_DEPOSITED_TO) VALUES ('DEPOSIT', SYSDATE, AMOUNT, DEPOSIT_ACCOUNT);
COMMIT;
END;
/


---WITHDRAW PROCEDURE
CREATE OR REPLACE PROCEDURE WITHDRAW(ACCOUNT IN NUMBER,AMOUNT IN NUMBER,TOTAL OUT NUMBER)
AS
CURRENT_BALANCE NUMBER;
BEGIN
SELECT FUNDS INTO CURRENT_BALANCE FROM ACCOUNT WHERE ACCOUNT_NUMBER = ACCOUNT;
IF CURRENT_BALANCE-AMOUNT<=500 THEN
TOTAL:=-1;
ELSE
CURRENT_BALANCE:=CURRENT_BALANCE-AMOUNT;
TOTAL:=CURRENT_BALANCE;
UPDATE ACCOUNT SET FUNDS = TOTAL WHERE ACCOUNT_NUMBER = ACCOUNT;
END IF;
NEW_WITHDRAW_TRANSACTION_ENTRY(ACCOUNT,AMOUNT);
COMMIT;
END;
/

---PROCEDURE for new WITHDRAW entry in the transactions database
CREATE OR REPLACE PROCEDURE NEW_WITHDRAW_TRANSACTION_ENTRY(WITHDRAW_ACCOUNT IN NUMBER,AMOUNT IN NUMBER)
AS
BEGIN
INSERT INTO TRANSACTION (TRANSACTION_TYPE, TRANSACTION_DATE, TRANSACTION_AMOUNT, ACCOUNT_WITHDRAWN_FROM) VALUES ('WITHDRAW', SYSDATE, AMOUNT, WITHDRAW_ACCOUNT);
COMMIT;
END;
/

---TRANSFER FUNDS PROCEDURE
CREATE OR REPLACE PROCEDURE TRANSFER_FUNDS(TRANSFERRING_ACCOUNT IN NUMBER,RECEIVING_ACCOUNT IN NUMBER,AMOUNT IN NUMBER,TRANSFERRER_TOTAL OUT NUMBER,RECEIVER_TOTAL OUT NUMBER)
AS
CURRENT_BALANCE NUMBER;
BEGIN
SELECT FUNDS INTO CURRENT_BALANCE FROM ACCOUNT WHERE ACCOUNT_NUMBER = TRANSFERRING_ACCOUNT;
IF CURRENT_BALANCE-AMOUNT<=500 THEN
TRANSFERRER_TOTAL:=-1;
ELSE
CURRENT_BALANCE:=CURRENT_BALANCE-AMOUNT;
TRANSFERRER_TOTAL:=CURRENT_BALANCE;
UPDATE ACCOUNT SET FUNDS = TRANSFERRER_TOTAL WHERE ACCOUNT_NUMBER = TRANSFERRING_ACCOUNT;
SELECT FUNDS INTO CURRENT_BALANCE FROM ACCOUNT WHERE ACCOUNT_NUMBER = RECEIVING_ACCOUNT;
CURRENT_BALANCE:=CURRENT_BALANCE+AMOUNT;
RECEIVER_TOTAL:=CURRENT_BALANCE;
UPDATE ACCOUNT SET FUNDS = CURRENT_BALANCE WHERE ACCOUNT_NUMBER = RECEIVING_ACCOUNT;
END IF;
NEW_TRANSFER_TRANSACTION_ENTRY(TRANSFERRING_ACCOUNT,RECEIVING_ACCOUNT,AMOUNT);
COMMIT;
END;
/

---PROCEDURE for new TRANSFER entry in the transactions database
CREATE OR REPLACE PROCEDURE NEW_TRANSFER_TRANSACTION_ENTRY(WITHDRAW_ACCOUNT IN NUMBER,DEPOSIT_ACCOUNT IN NUMBER,AMOUNT IN NUMBER)
AS
BEGIN
INSERT INTO TRANSACTION (TRANSACTION_TYPE, TRANSACTION_DATE, TRANSACTION_AMOUNT, ACCOUNT_WITHDRAWN_FROM, ACCOUNT_DEPOSITED_TO) VALUES ('TRANSFER', SYSDATE, AMOUNT, WITHDRAW_ACCOUNT, DEPOSIT_ACCOUNT);
COMMIT;
END;
/

---CHECK BALANCE PROCEDURE
CREATE OR REPLACE PROCEDURE CHECK_BALANCE(ACCOUNT IN NUMBER, BALANCE OUT NUMBER)
AS
BEGIN
SELECT FUNDS INTO BALANCE FROM ACCOUNT WHERE ACCOUNT_NUMBER = ACCOUNT;
COMMIT;
END;
/

---TRANSACTION TABLE

CREATE TABLE TRANSACTION(
TRANSACTION_ID NUMBER PRIMARY KEY,
TRANSACTION_TYPE VARCHAR2(20),
TRANSACTION_DATE DATE,
TRANSACTION_AMOUNT NUMBER,
ACCOUNT_WITHDRAWN_FROM NUMBER,
ACCOUNT_DEPOSITED_TO NUMBER
);
insert into transaction values(null,'Withdraw',sysdate,350,null,123456,null);

//function GEN_TRANSACTION_ID for generating transaction id

CREATE OR REPLACE FUNCTION GEN_TRANSACTION_ID(currentdate in date)
RETURN NUMBER
IS
trans_id TRANSACTION.TRANSACTION_ID%TYPE:=0;
currenttransactionid NUMBER:=0;
BEGIN
select count(*) into currenttransactionid from TRANSACTION where to_char(TRANSACTION_DATE) LIKE to_char(sysdate);
IF currenttransactionid IS NULL THEN  ---FOR THE FIRST TIME
	currenttransactionid := 1;
	trans_id := TO_NUMBER(SUBSTR(TO_CHAR(currentdate, 'YYYYMMDD'),2,6) || TO_CHAR(currenttransactionid));
ELSE 
SELECT MAX(TRANSACTION_ID) INTO trans_id FROM TRANSACTION;
trans_id:=trans_id+1;
END IF;

RETURN NVL(trans_id,-1);
END;
/

//trigger for implicitly creating and adding transaction id
CREATE OR REPLACE TRIGGER TRIGGER_GEN_TRANSACTION_ID
BEFORE INSERT ON TRANSACTION
FOR EACH ROW
BEGIN
:NEW.TRANSACTION_ID:=GEN_TRANSACTION_ID(SYSDATE);
END;
/